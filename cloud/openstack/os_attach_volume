#!/usr/bin/env python

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

from ansible.module_utils.basic import *
from novaclient.client import Client
from cinderclient import client as cinderclient
from retrying import retry
import os

DOCUMENTATION =  '''
---
module: os_attach_volume
version_added: "1.9"
short_description: Attach a volume to an instance
description:
   - Create and attach a volume to an instance
author: Max Cameron
options:
  login_username:
    description:
      - login username to authenticate to keystone
    required: true
    default: admin
  login_password:
    description:
      - Password of login user
    required: true
    default: 'yes'
  login_tenant_name:
    description:
      - The tenant name of the login user
    required: true
    default: 'yes'
  auth_url:
    description:
      - The keystone url for authentication
    required: false
    default: 'http://127.0.0.1:35357/v2.0/'
  region_name:
    description:
      - Name of the region
    required: false
    default: None
  name:
    description:
      - Name that has to be given to the instance (Volume will inherit the name)
    required: true
    default: None
  size:
    description:
      - Size of the volume to attach
    required: True
    default: None
  mountpoint:
    description:
      - Mountpoint to attempt to attach to on the instance
    required: False
    default: '/dev/vdb'
requirements: ["novaclient", "cinderclient", "retrying"]
'''

EXAMPLES = '''
os_attach_volume: size=100 name=my_graphite_server mountpoint=/dev/vdb
'''

def get_nova_credentials_v2(region='Slo'):
  d = {}
  d['version'] = '2'
  d['username'] = os.environ['OS_USERNAME']
  d['api_key'] = os.environ['OS_PASSWORD']
  d['auth_url'] = os.environ['OS_AUTH_URL']
  d['project_id'] = os.environ['OS_TENANT_NAME']
  d['region_name'] = region
  return d


def get_cinder_credentials_v1(region='Slo'):
  d = {}
  d['version'] = '1'
  d['username'] = os.environ['OS_USERNAME']
  d['api_key'] = os.environ['OS_PASSWORD']
  d['auth_url'] = os.environ['OS_AUTH_URL']
  d['project_id'] = os.environ['OS_TENANT_NAME']
  d['region_name'] = region
  return d


def initialise_nova(region=os.environ.get('OS_REGION_NAME')):
  credentials = get_nova_credentials_v2(region)
  nova_client = Client(**credentials)
  return nova_client


def initialise_cinder(region=os.environ.get('OS_REGION_NAME')):
  credentials = get_cinder_credentials_v1(region)
  cinder = cinderclient.Client(**credentials)
  return cinder


NOVA_CLIENT = initialise_nova()
CINDER = initialise_cinder()


@retry(wait_exponential_multiplier=500, wait_exponential_max=10000, stop_max_attempt_number=7)
def attach_volume(instance, volume, mountpoint):
  NOVA_CLIENT.volumes.create_server_volume(instance, volume, mountpoint)


def get_volume(name):
  """
  Check if a volume with name exists
  """
  for volume in CINDER.volumes.list():
    vol = CINDER.volumes.get(volume.id)
    if vol.display_name == name:
      return vol
  return None


def volume_attached(volume_id, instance):
  """
  Check volume list from cinder against volume list from the instance for a match
  """
  try:
    for volume in instance._info['os-extended-volumes:volumes_attached']:
      if str(volume['id']) == str(volume_id):
        return True
    return False
  except Exception as error:
    raise error


def main(size, name, mountpoint):
  try:
    volume = get_volume(name)
    instance = NOVA_CLIENT.servers.find(name=name)
  except Exception as error:
    module.fail_json(changed=False, msg=error.message)
  if volume is not None:
    try:
      attached = volume_attached(volume.id, instance)
    except Exception as error:
      module.fail_json(changed=False, msg="Checking attached: " + error.message)
    if attached:
      module.exit_json(change=False, msg="Volume already attached")
    else:
      try:
        attach_volume(instance.id, volume.id, mountpoint)
        module.exit_json(change=True, msg="Existing volume attached")
      except Exception as error:
        module.fail_json(changed=False, msg="Failure to attach: " + error.message)
  else:
    try:
      volume = CINDER.volumes.create(size, display_name=name)
      attach_volume(instance.id, volume.id, mountpoint)
      module.exit_json(change=True, msg="New volume attached")
    except Exception, error:
      module.fail_json(msg=error.message)


module=AnsibleModule(
  argument_spec=dict(
    name=dict(
      required=True
    ),
    size=dict(
      required=True
    ),
    mountpoint=dict(
      required=False
    )
  )
)


name = module.params.get("name")
size = module.params.get("size")
mountpoint = module.params.get("mountpoint")
main(size, name, mountpoint)


